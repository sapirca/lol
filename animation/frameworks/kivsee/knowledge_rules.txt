prompt = """Create a TypeScript light show animation using the Kivsee Animation framework. In each response, wrap the entire TypeScript animation within `<animation></animation>` tags.

### Guidelines:

#### 1. Async Restrictions
- Inside the animation sequence (`Animation.sync(...)`), **do not** use `await` or `async`.

#### 2. Effect Pipeline
Effects follow a structured pipeline: **Beats → Elements → Coloring → Optional Relative Effects** (e.g., brightness, motion).  
- **Relative effects** (e.g., brightness from `brightness.ts`) modify the existing brightness defined in `coloring.ts`.  
  - Example: `fadeIn({ start: 0.1, end: 0.7 })` scales the current brightness by 0.7.
  
- Effects accumulate over the same beat range:
  - If you define:
    ```typescript
    beats(3,16, () => {
      constColor(RED);
      constColor(GREEN);
    });
    ```
    The **GREEN** color will override the previous RED, making GREEN the final visible color.

#### 3. Brightness Restrictions
The LED elements are connected to a power supply, so you must not use a brightness level higher than BRIGHTNESS_MAX at the final brightness. 
Exceeding this limit will cause the LED controller to crash. 
- **Coloring effect brightness** (e.g., `constColor` in `coloring.ts`) must be **≤ 0.5** (preferably 0.3) to prevent controller crashes.
- **Brightness effects** (e.g., `fadeIn`, `fadeOut` in `brightness.ts`) can go up to **1.0**, since they modify the coloring effect's brightness.
  - If coloring effect brightness is 0.7 and the relative brighness end is 0.9 then the final brightness is will result in 0.7*0.9=0.56
- For readibility you can defined brightness constants and use them, e.g.:
  ```typescript
  OFF = 0.0;
  LOW_BRIGHTNESS = 0.1;
  MEDIUM_BRIGHTNESS = 0.3;
  HIGH_BRIGHTNESS = 0.5;
  ```

#### 4. Saturation Restrictions
- Saturation should generally be **≥ 0.8** (`SATURATION_MIN = 0.8`), up to `SATURATION_MAX = 1.0`, to maintain vibrant colors.
- Use `SATURATION_WHITE = 0.0` for white light.
- Saturation below 0.8 might appear dull and less appealing.

#### 5. Color Constants
Define hue constants at the top of your TypeScript file:
```typescript
HUE_START = 0.0; // Red
HUE_GREEN = 0.3;
HUE_BLUE = 0.6;
HUE_PURPLE = 0.8;
HUE_RED = 1.0;  // (Same as HUE_START, since hue cycles)
```
- **Hue is cyclic**, meaning `0.0 == 1.0` (repeats beyond 1.0, like `1.2` being another cycle).

#### 6. Timing Rules
- Effects must **span at least one beat** (`beats(0, 1, ...)` is valid; `beats(3, 3, ...)` is invalid).
- Use:
  ```typescript
  beats(startBeat, endBeat, () => {...});
  ```
  for one-time effects.

- **Repeating effects**:
  ```typescript
  cycleBeats(beatsInCycle, startBeat, endBeat, () => {...});
  ```
  - `startBeat` and `endBeat` are **relative** to `beatsInCycle`.
  - Example:
    ```typescript
    cycleBeats(4, 0, 2, () => {...});
    ```
    - Repeats every **4 beats**.
    - Uses beats **0, 1, and 2** within that cycle.

#### 7. Hue Cycling
- **Hue values range from 0.0 to 1.0** (covering all colors).
- **Beyond 1.0, hues cycle again** (e.g., `1.2` is a repeat of earlier colors).

#### 8. Segments
- You can control **specific pixel segments** instead of lighting the entire element.
  - Example: `segment_b1` lights **every 5th pixel** (`modulo 5`).
  - Some segments **rearrange pixels**, like `segment_arc`, which creates a **center-out** effect.

### Example (Conceptual)
```typescript
<animation>
const testSequence = async () => {
  const testAnimation = new Animation(song_name, 128, 30);
  testAnimation.sync(() => { // No async

    // Effect from beat 0 to 3 (inclusive)
    beats(0, 3, () => { 
      elements([element1_number, element2_number], () => {
        constColor({ hue: HUE_RED, saturation: SATURATION_MAX, brightness: MEDIUM_BRIGHTNESS });
        fadeIn({ start: 0.1, end: 1.0 }); // Brightness scales from 0.1x to 1.0x of MEDIUM_BRIGHTNESS
      });
    });

    // Repeats every 4 beats, using beats 0 and 1 of the cycle
    cycleBeats(4, 0, 1, () => { 
      elements(element3, () => {
        constColor({ hue: HUE_BLUE, saturation: SATURATION_MIN, brightness: LOW_BRIGHTNESS });
      });
    });

  });
};
</animation>
"""


__________________________________________________________________________________________________________________________________________________________________________


Restriction #4
In the method
export const cycleBeats = (beatsInCycle: number, startBeat: number, endBeat: number, cb: Function) => ...
The first parameter `beatsInCycle` determines the number of beats after which the effect should repeat.
For example, if `beatsInCycle` is set to 4, the effect will repeat every 4 beats. 
In the `cycleBeats` function, `startBeat` and `endBeat` are relative to the defined cycle, so both should be less than `beatsInCycle`.


Knowledge #1: Colors
These constants are not defined in the system. If you want to use any constant, you should declare it at the top of the TypeScript file. 

Knowledge #2:
Hue is represented as a floating-point number and is cyclic. This means that 0.0 is red, and 1.0 is also red. Similarly, 0.3 is green, and 1.3 is also green.
const HUE_START = 0.0 // Red
const HUE_GREEN = 0.3 // Green
const HUE_BLUE = 0.6 // Blue
const HUE_PURPLE = 0.8 // Purple
const HUE_RED = 1.0 // Red


Mistakes learned from previous conversations: 

Lesson learned #1:
await is not required in TypeScript chained effects. The sequence is chronological and should be executed in order.
also don't add async in the (testAnimation.sync(() => {)

Lesson learned #2:
Each TypeScript animation should be wrapped with <animation> </animation> tags.

Lesson learned #3:
You must put effect for at least 1 beat, from beat x to beat x doesn't do anything.
This is wrong: beats(3, 3, () => 

Lesson learned #3:
cycleBeat is when you want to repeat an effect again and again, if you want to have an effect only once for a specfic duration use beats
beats(0,1 -> elements -> const colot


Note to user:
should add offsset


