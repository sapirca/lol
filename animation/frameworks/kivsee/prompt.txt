# TypeScript Animation Structure

Animations are written in TypeScript and structured as a sequence of timed visual effects applied to specific Elements or groups of Elements.

## Types of Effects
Each animation consists of three types of effects:

- **Coloring Effects** – Define the base color and visibility of an Element. _(Mandatory to make it visible)_
- **Brightness Effects** – Modify intensity over time (e.g., fade, blink). _(Optional)_
- **Motion Effects** – Create dynamic movement patterns (e.g., snake). _(Optional)_

At a minimum, an Element must have a coloring effect for it to be visible. For example, applying `rainbow()` will cycle through the full color spectrum across the LED strip.

### Layering Effects
You can layer additional effects:

- Adding brightness effects (e.g., `fadeIn()`, `blink()`) adjusts intensity over time.
- Applying motion effects (e.g., `snake()`) creates movement transformations.

#### Example
For beats 0-4, if `element1` has:

- **Coloring:** `rainbow()`
- **Brightness:** `blink()`

The result will be a blinking rainbow-colored LED strip.

## Motion Effects
Motion effects add movement to the animation. For example, `snake()` creates a moving light trail with a fading tail. If `element1` is a horizontal LED strip, applying:

```typescript
rainbow() + blink() + snake()
```

…will create a snake-like light pattern, moving from left to right, blinking in a gradient of rainbow colors.

---

## TypeScript Structure
To define an animation, initialize an `Animation` object and synchronize effects to beats:

```typescript
const testSequence = async () => {
    const testAnimation = new Animation("req", 126, 50);
    testAnimation.sync(() => {
        // Define the animation sequence here.
    });
};
```

- An `Animation` class that accepts the song name, BPM, and duration as arguments.
- Call the `sync` method and pass an animation sequence callback function.

### Animation Sequence
The animation is structured as a hierarchy of time frames, each defining effects for a specific range of beats. Within each time frame, you specify which Elements are affected and what visual effects will be applied.

#### Time Frame Structure
Each time frame is defined using the `beats()` function:

```typescript
beats(start_beat, end_beat, () => {
    // Define element effects for this time range.
});
```

- `start_beat` – The beginning of the time frame (in beats).
- `end_beat` – The end of the time frame (in beats).
- `callback` – A function specifying effects for the selected Elements.

##### Example time frame breakdown:
- **Beats 0-4** – Define elements and effects.
- **Beats 4-8** – Define elements and effects.
- **Beats 8-12** – Define elements and effects.

### Element Selection
Inside `beats()`, you must explicitly declare which Elements will be affected. Use the `elements()` function to specify targets:

```typescript
elements(elements_list, () => {
    // Define the effects for these Elements.
});
```

- `element_list` – An array of Elements to modify.
- `callback` – A function specifying effects for these Elements.

#### Example Usage

```typescript
beats(0, 4, () => {
    elements([element_name], () => {
        // Effects for element1
    });

    elements([element_name, element_name], () => {
        // Effects for element2 and element3
    });

    elements(elements_group_name, () => {
        // Effects for all Elements
    });
});
```

### Element Grouping
Predefined element groups include:

- **center** – Elements positioned at the center of the installation.
- **odd** – Elements at odd-numbered positions.
- **even** – Elements at even-numbered positions.

These groups can be referenced directly when applying effects to multiple Elements at once.

## Available Effects
Effects are categorized into three groups: **Coloring, Brightness, and Motion**.

### Coloring Effects
Coloring effects define the base color of an element. If no coloring effect is applied, the element will not be visible.

```typescript
constColor(hue, sat, val);  // Static color using HSV (Hue, Saturation, Value)  
rainbow();  // Cycles through the full spectrum of colors  
```

### Brightness Effects
Brightness effects modify the intensity of the light. If no brightness effect is set, brightness remains constant.

```typescript
fadeIn({ start, end });       // Gradually increases brightness  
fadeOut({ start, end });      // Gradually decreases brightness  
fadeInOut({ min, max });      // Fades in, then fades out  
fadeOutIn({ min, max });      // Fades out, then fades back in  
blink({ low, high });         // Alternates between two brightness levels  
```

### Motion Effects
Motion effects create movement in the animation.

```typescript
snake();                     // Moves in a snake-like pattern  
snakeInOut();  // A variation with different movement dynamics  
```

---

## Example: Basic Animation

```typescript
const testSequence = async () => {
  const testAnimation = new Animation("req", 126, 50);
  testAnimation.sync(() => {
    beats(0, 120, () => {
      elements(odd, () => {
        rainbow();
        fadeIn();
      });
      elements(even, () => {
        rainbow();
        fadeOut();
      });
    });
  });
};
```

- **Odd elements**: Cycle through rainbow colors with a fade-in effect.
- **Even elements**: Cycle through rainbow colors with a fade-out effect.

## Optional: Segment-Specific Effects
The `segment` method allows targeting a subset of LEDs within an element.

### Example Usage

```typescript
elements([element_list], () => {
    segment(segment_id, () => {
        // Define the effects for the segment here
    });
});
```

- **Odd Pixels** – Turns on every other LED.
- **Reverse Segment** – Moves a snake effect in the opposite direction.

## Optional: Repeating Animations (Cycle Beats)

The `cycleBeats` method allows repeating animations within a specified range.

```typescript
cycleBeats(beatsInCycle, startBeat, endBeat, () => {
    // Define the effect for the cycle here
});
```

### Example of Cycle Beats

```typescript
beats(8, 16, () => {
    elements(all, () => {
        rainbow({ startHue: 0.05, endHue: 0.15 });
        cycleBeats(8, 0, 4, () => { fadeIn(); });
        cycleBeats(8, 4, 8, () => { fadeOut(); });
    });
});
```

### Animation Example

```typescript
const testSequence = async () => {
  const testAnimation = new Animation("req", 126, 50);
  testAnimation.sync(() => {
    beats(0, 120, () => {
      elements(all, () => {
        rainbow();
        segment(segment_name1, () => { cycleBeats(4, 0, 4, () => { fadeOutIn({ min: 0.5 }); }); });
        segment(segment_name2, () => { cycleBeats(8, 0, 8, () => { constColor(0.3, 1.0, 0.3); fadeInOut({ min: 0.5, max: 0.9 }); }); });
      });
    });
  });
};
```